"""
Problem explained here:
https://www.hackerrank.com/challenges/min-max-riddle/problem
or
https://www.geeksforgeeks.org/find-the-maximum-of-minimums-for-every-window-size-in-a-given-array/
"""

from collections import deque

test_cases = [
    [2, 6, 1, 12],
    [1, 2, 3, 5, 1, 13, 3],
    [3, 5, 4, 7, 6, 2],
    [894059773, 675064454, 766421039, 183804740, 272974047, 318194207, 796467272, 599168674, 919109084, 204797163, 56228018, 552520820, 842849403, 616362851, 37312720, 447356912, 297292879, 771454052, 917766476, 518006057, 102858325, 63108402, 427151841, 923058132, 863670730, 915203352, 114510793, 185323012, 337816875, 235484693, 720229272, 295420078, 920480415, 409792010, 96481372, 844770861, 333773382, 803453647, 989088845, 994124828, 982460315, 291934617, 116326938, 141807605, 87343853, 61793254, 736141408, 456307524, 926320795, 157666054, 39021763, 641364916, 580916803, 69301641, 566817912, 765267632, 805798071, 247296134, 767662384, 654521994, 947278525, 682571339, 343939364, 264009444, 408838539, 60025859, 79650871, 434273506, 150436591, 453357282, 625688135, 710801851, 500705029, 9558743, 799843801, 449450109, 790814906, 574791471, 421196586, 957902837, 361259174, 218758579, 116404064, 50868182, 341974529, 622830856, 951805413, 765028295, 986674945, 591922994, 41621080, 236320336, 952581487, 867980258, 759094634, 190758500, 79824507, 368359526, 499035193, 879555698, 241051670, 455572992, 121389583, 193529635, 701515460, 53534166, 479035242, 937791387, 956368783, 724142588, 563317008, 899334122, 465361113, 880752482, 342852924, 817683442, 812643246, 18868753, 330313869, 814211183, 54002285, 171882536, 576313784, 450162658, 643600399, 506431893, 182804366, 427654373, 188055367, 764430926, 169812165, 678712314, 158344134, 502368260, 310976870, 643996852, 459459043, 828941351, 634824028, 440250825, 906860903, 503384703, 67698043, 493582906, 9337359, 625827651, 194572098, 966203132, 623407686, 75087081, 274479388, 681756400, 746037275, 722405489, 513605319, 454198570, 32557751, 637624310, 369068878, 145414987, 718213688, 56465290, 982153357, 785483564, 889455988, 490390339, 622655997, 111835183, 944959624, 854108729, 585298682, 512069846, 638522948, 917240977, 827120143, 501863982, 218513629, 222000288, 925738306, 242494938, 928088775, 165753794, 825730988, 828239401, 839982205, 997383085, 936927297, 941942658, 188866948, 13826616, 55766913, 234582227, 381265665, 604770240, 898572062, 386240982, 300121305, 708673, 58077199, 206862163, 504446066, 249811601, 251527924, 906043711, 97321326, 374091863, 976931470, 658009566, 329098687, 428840145, 983877979, 392497889, 283280511, 327840941, 454655441, 39350534, 100869308, 746083306, 837045856, 785094438, 928356407, 717961510, 55220499, 12351142, 33138426, 131874500, 909749754, 766156097, 90731954, 311049352, 821410726, 174983228, 327321205, 490340902, 852139050, 557118157, 815517833, 658503027, 301710520, 163002038, 285995063, 590556140, 856240435, 185211602, 800663577, 889027207, 183924593, 684323468, 165274973, 723618800, 426771362, 812940540, 627654269, 406692436, 663536286, 384745717, 283177955, 582460055, 101484984, 183435756, 983434360, 926611306, 678845272, 161119564, 623410669, 724891222, 498160707, 87068041, 99032865, 914896943, 236154867, 52030517, 555581611, 923633033, 251640651, 21016508, 903653134, 994970214, 487955261, 733042111, 941457385, 599526078, 134534125, 374702357, 712551150, 462096640, 943351055, 352677868, 633834889, 518420561, 20826611, 331626496, 178071289, 963464437, 470234374, 493238081, 456243014, 484489789, 179094337, 864167061, 703787743, 970385136, 766613225, 378514501, 820209128]
]

solutions = [
    [12, 2, 1, 1],
    [13, 3, 2, 1, 1, 1, 1],
    [7, 6, 4, 4, 3, 2],
    [997383085, 989088845, 982460315, 839982205, 828239401, 825730988, 512069846, 501863982, 342852924, 342852924, 342852924, 218513629, 218513629, 178071289, 165753794, 165753794, 165753794, 165753794, 165753794, 165753794, 165753794, 163002038, 163002038, 163002038, 163002038, 163002038, 163002038, 163002038, 163002038, 101484984, 101484984, 101484984, 101484984, 101484984, 101484984, 101484984, 101484984, 101484984, 90731954, 90731954, 90731954, 90731954, 87068041, 87068041, 87068041, 87068041, 52030517, 52030517, 52030517, 52030517, 39021763, 39021763, 39021763, 39021763, 39021763, 39021763, 39021763, 39021763, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 37312720, 20826611, 20826611, 20826611, 20826611, 20826611, 20826611, 20826611, 20826611, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 12351142, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9558743, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 9337359, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673, 708673]
]

"""
[1, 2, 3, 5, 1, 13, 3]

stack = 2 
index = 0
next  = 

right_min = {3: 4, 2:4, 1:4, 5:6, 0:7, 4:7, 6:7}
left_min =  [0, 1, 2, 3, 1, 4, 4]

win_size =  [7, 3, 2, 1, 7, 1, 2]

{7: [0], }

"""


def riddle(arr):
    riddle_sol = []
    stack = []
    indexes = []
    right_min_elem_index = {}
    left_min_elem_index = []

    """
    EXPLANATION: first find the index of the next min element on the right and on the left side.
    If none, use window length on the right, or 0 on the left. With this information, it is possible to calculate the
    maximum window size for which that number (in position i) is the min number. Group by win size and 
    break ties with max(). This will result in the max for each window. 
    
    """

    # Right side
    for i, elem in enumerate(arr):
        while len(stack) > 0 and stack[-1] > elem:
            _ = stack.pop(-1)
            index = indexes.pop(-1)
            right_min_elem_index[index] = i

        stack.append(elem)
        indexes.append(i)

    while len(stack) > 0:
        _ = stack.pop(-1)
        index = indexes.pop(-1)
        right_min_elem_index[index] = len(arr)

    # Now left side
    indexes = []
    for i, elem in enumerate(arr):
        while len(stack) > 0 and stack[-1] >= elem:
            stack.pop()
            indexes.pop()

        if len(indexes) > 0:
            left_min_elem_index.append(indexes[-1]+1)
        else:
            left_min_elem_index.append(0)
        indexes.append(i)
        stack.append(elem)

    max_window_size = []
    for i, elem in enumerate(left_min_elem_index):
        max_window_size.append(right_min_elem_index[i]-elem)

    # Find the max for each window size
    max_value_per_window = {}
    for i, elem in enumerate(max_window_size):
        win_value = arr[i]
        current_max_value_per_window = max_value_per_window.get(elem, None)
        if not current_max_value_per_window or current_max_value_per_window < win_value:
            max_value_per_window[elem] = win_value

    def get_next_value(d, i):
        if len(arr) < i:
            return None
        return d.get(i+1, get_next_value(d, i+1))

    for i in range(1, len(arr)+1):
        riddle_sol.append(max_value_per_window.get(i, get_next_value(max_value_per_window, i)))

    return riddle_sol


for test, sol in zip(test_cases, solutions):
    span = riddle(test)
    print(span)
    print(sol)
    assert span == sol
    print()

print("Done!")

